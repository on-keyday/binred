# BNFもどき
# # - コメント
# * - 1回以上の繰り返し
# ? - 存在する場合のみ
# & - ひとつ前の要素に隣接する(空白等を認めない)
# *? or ?* - 0回以上の繰り返し
# [a|b] - aまたはb 
# [a|b]$* - aまたはbの繰り返しで各要素は1回ずつ出現
# ID - 識別子(定義の中に存在しないワード)
# INTEGER - 整数(10進、16進(0x)) 
# NUMBER - 実数(INTEGERを内包)
# STRING - 文字列
# EOL - End Of Line
# EOF - End Of File
# 以下callback用の機能
# BOS - Begining Of Statement
# EOS - End Of Statement 
# (かっこなどで閉じられておらず、開始・終了の判定の難しいものなどに便宜的に使う)
# (本当に初めの位置または終わりの位置にある必要はない。
# しかし、途中においてあってもたいして役に立たない)
# 空白は自動で無視(よって、pythonとかの文法を解析できない)
# 改行はEOLで検出可能
# エスケープシーケンスは無効(これもそのうち(略))
# ROOTから解析が始まる

ROOT:=SEXPR
GLOBALSTMT:=[STRUCT|NAMESPACE]
STRUCT:="struct" ID BASESTRUCT? "{" VARDEF?* "}"
BASESTRUCT:= ":" VARDEF
VARDEF:= ID TYPE
TYPE:=["int"|"bit"|"byte"|"string"| ID]
VARINIT:= ID ["," ID]*? ":=" EXPR EOS
EXPR:=ASSIGN
ASSIGN:=EQ [["="] ASSIGN]*?
EQ:=ADD [["=="|"!="|">"|"<"|">="|"<="] ADD]*?
ADD:=PRIM [["+"|"-"|"&"|"|"] PRIM]*?
PRIM:=["true"|"false"|"nil"|INTEGER|IDs|"(" EXPR ")"|STRING]
IDs:=ID AFTER?
AFTER:=["." ID|FUNCCALL]*
NAMESPACE:="namespace" ID "{" STMT*? "}"
STMT:=[VARSTMT|IFSTMT|RETURNSTMT|FUNCSTMT|STRUCT|NAMESPACE|IDINIT|EXPRSTMT]
FUNCSTMT:="func" ID "(" [VARDEF ["," VARDEF]*? ]? ")" FUNCRETURN? "{" STMT*? "}"
FUNCRETURN:="->" TYPE
IFSTMT:="if" EXPR [";" EXPR]? "{" STMT*? "}"
RETURNSTMT:="return" EXPR
FUNCCALL:="(" [EXPR ["," EXPR]*? ]?")"
VARSTMT:="var" VARDEF
EXPRSTMT:=BOS EXPR EOS

#S式
SEXPR:=[ID|"("SEXPR "." SEXPR ")"|SLIST]
SLIST:="(" SEXPR SEXPR*? ")" 
