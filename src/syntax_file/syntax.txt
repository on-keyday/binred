# BNFもどき
# # - コメント
# * - 1回以上の繰り返し
# ? - 存在する場合のみ
# & - ひとつ前の要素に隣接する(空白等を認めない)(for literal or keyword)
# ! - 失敗すると致命的なエラー 
# & > ! > ? > * > $ の順番で評価される 
# *? or ?* - 0回以上の繰り返し
# [a|b] - aまたはb 
# [a|b]$* - aまたはbの繰り返しで各要素は1回ずつ出現
# ID - 識別子(定義の中に存在しないワード)
# INTEGER - 整数(10進、16進(0x)) 
# NUMBER - 実数(INTEGERを内包)
# STRING - 文字列
# KEYWORD - 任意のキーワード
# SYMBOL - 任意の記号
# EOL - End Of Line
# EOF - End Of File
# 以下callback用の機能
# BOS - Begining Of Statement
# EOS - End Of Statement
# かっこなどで閉じられておらず、開始・終了の判定の難しいものなどに便宜的に使う。
# 本当に初めの位置または終わりの位置にある必要はない。
# しかし、途中にあってもたいして役に立たないだろう。
# 無くても構文解析には影響がなく、意味解析の補助的な意味合いがある。
# 空白は自動で無視(よって、pythonとかの文法を解析できない)
# 改行はEOLで検出可能
# エスケープシーケンスは無効(これもそのうち(略))
# ROOTから解析が始まる

ROOT:=IMPLSTMT EOF

IMPLSTMT:=[IFSTMT|VARINIT|EXPRSTMT]*

GLOBALSTMT:=[STRUCT|NAMESPACE]
STRUCT:="struct" ID BASESTRUCT? "{" VARDEF?* "}"
BASESTRUCT:= ":" VARDEF!
VARDEF:= ID TYPE
TYPE:=["int"|"bit"|"byte"|"string"| ID]
VARINIT:= ID ["," ID!]*? ":=" EXPR ["," EXPR]*? EOS
EXPR:=ASSIGN
ASSIGN:=EQ [["="] ASSIGN!]*?
EQ:=ADD [["=="|"!="|">"|"<"|">="|"<="] ADD!]*?
ADD:=PRIM [["+"|"-"|"&"|"|"] PRIM!]*?
PRIM:=["true"|"false"|"nil"|INTEGER|IDs|"(" EXPR ")"|STRING]
IDs:=ID AFTER?
AFTER:=["." ID!|FUNCCALL]*
NAMESPACE:="namespace" ID "{" STMT*? "}"
STMT:=[VARSTMT|IFSTMT|RETURNSTMT|FUNCSTMT|STRUCT|NAMESPACE|VARINIT|EXPRSTMT]
FUNCSTMT:="func" [ID "(" [VARDEF ["," VARDEF]*? ]? ")" FUNCRETURN? "{" STMT*? "}"]! ELSESTMT? EOS
FUNCRETURN:="->" TYPE!
IFSTMT:="if" [IFCOND "{" IMPLSTMT? "}"]!
IFCOND:= [VARINIT|EXPRSTMT] [";" EXPRSTMT!]?
ELSESTMT:="else" ["{"STMT*?"}"|BOS IFSTMT]!
RETURNSTMT:="return" EXPR
FUNCCALL:="(" [EXPR ["," EXPR]*? ]? ")"!
VARSTMT:="var" VARDEF
EXPRSTMT:=BOS EXPR EOS


#S式
SEXPR:=[ID|"("SEXPR ["." SEXPR|SEXPR*?] ")"]

